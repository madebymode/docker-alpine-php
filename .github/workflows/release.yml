name: Create Releases and Build Docker images

on:
  push:
    branches:
      - 'master'

jobs:
  create-release-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2']
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup GitHub CLI
      run: |
        gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Create Releases and Build Images
      run: |
        for VERSION in "${{ matrix.version }}"; do
          for TYPE in "cli" "fpm"; do
            DIR="${TYPE}/${VERSION}"
            if [[ -f "$DIR/.env" ]]; then
              set -a
              source $DIR/.env
              set +a

              TAG_NAME="mxmd/php:${PHP_VERSION}-${TYPE}"

              # Check for release existence
              if ! gh release view $TAG_NAME > /dev/null 2>&1; then
                gh release create $TAG_NAME \
                  --title "PHP $PHP_VERSION ($TYPE) release" \
                  --notes "Release of Docker image for PHP $PHP_VERSION ($TYPE)"
                echo "RELEASE_CREATED=true" >> $GITHUB_ENV
              else
                echo "Release for $TAG_NAME already exists. Skipping."
                continue
              fi

              # Docker Build and Push steps
              docker buildx build --push \
                --platform linux/amd64,linux/arm64 \
                --tag "${TAG_NAME}" \
                --build-arg PHP_VERSION="${PHP_VERSION}" \
                --build-arg ALPINE_VERSION="${ALPINE_VERSION}" \
                --build-arg ALPINE_IMAGE="alpine:${ALPINE_VERSION}" \
                --file "${DIR}/Dockerfile" $TYPE/
            fi
          done
        done
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
